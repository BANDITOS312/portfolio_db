# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω—É–∂–Ω–æ–µ
from logic import DB_Manager
from config import *
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types

# –¥–µ–ª–∞–µ–º –±–æ—Ç–∞
bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove() 

# –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
def cansel(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info", reply_markup=hideBoard)

# –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
def no_projects(message):
    # –≤–≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤!\n–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—à—å—é –∫–æ–º–∞–Ω–¥—ã /new_project')

# –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
def gen_inline_markup(rows):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
    markup.add(KeyboardButton(cancel_button))
    return markup

# –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
attributes_of_projects = {'–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞' : ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞", "project_name"],
                          "–û–ø–∏—Å–∞–Ω–∏–µ" : ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "description"],
                          "–°—Å—ã–ª–∫–∞" : ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "url"],
                          "–°—Ç–∞—Ç—É—Å" : ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏", "status_id"]}

# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
def info_project(message, user_id, project_name):
    # –±–µ—Ä–µ–º –∏–Ω—Ñ—É –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö —é–∑–µ—Ä–∞
    info = manager.get_project_info(user_id, project_name)[0]
    # –±–µ—Ä–µ–º —Å–∫–∏–ª—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
    skills = manager.get_project_skills(project_name)
    # –µ—Å–∏–ª –Ω–µ—Ç —Å–∫–∏–ª–æ–≤ —Ç–æ
    if not skills:
        # —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –Ω–µ—Ç —Å–∫–∏–ª–æ–≤
        skills = '–ù–∞–≤—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'
    # –≤–≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã –æ –ø—Ä–æ–µ–∫—Ç–µ
    bot.send_message(message.chat.id, f"""Project name: {info[0]}
Description: {info[1]}
Link: {info[2]}
Status: {info[3]}
Skills: {skills}
""")

# –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
# —Å–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
def start_command(message):
    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∑ —á—Ç–æ –∑–∞ –±–æ—Ç
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö!) 
""")
    # –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ info
    info(message)

# –∫–æ–º–∞–Ω–¥–∞ info
@bot.message_handler(commands=['info'])
# —Ñ—É–Ω–∫—Ü–∏—è Info
def info(message):
    # –≤–≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    bot.send_message(message.chat.id,
"""
–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:

/new_project - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
/skills - –¥–æ–±–æ–≤–ª—è–µ—Ç —Å–∫–∏–ª–ª –∫ –≤—ã–±—Ä–∞–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
/projects - –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã
/update_projects - –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–∞—à –ø—Ä–æ–µ–∫—Ç
/delete - —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç

–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º!""")
    

# –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['new_project'])
def addtask_command(message):
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è 
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä name_project
    bot.register_next_step_handler(message, name_project)

# —Ñ—É–Ω–∫—Ü–∏—è
def name_project(message):
    # –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
    name = message.text
    # –∞–π–¥–∏ —é–∑–µ—Ä–∞
    user_id = message.from_user.id
    # —Å–ø–∏—Å–æ–∫
    data = [user_id, name]
    # –≤–≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
    # –Ω–µ–∫—Å—Ç —Ö–µ–Ω–¥–ª–µ—Ä
    bot.register_next_step_handler(message, link_project, data=data)

# —Ñ—É–Ω–∫—Ü–∏—è
def link_project(message, data):
    # –¥–æ–±–æ–≤–ª—è–µ–º –≤ data —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç
    data.append(message.text)
    # –±–µ—Ä–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã
    statuses = [x[0] for x in manager.get_statuses()] 
    # –≤—ã–≤—ã–¥–∏–º —Å—Ç–∞—Ç—É—Å—ã –≤ –≤–∏–¥–µ –ø–∞–Ω–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=gen_markup(statuses))
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä callback_project
    bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)

# –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
def callback_project(message, data, statuses):
    # –±–µ—Ä–µ–º —Å—Ç–∞—Ç—É—Å
    status = message.text
    # –µ—Å–∏–ª–∏ text = –∫–Ω–æ–ø–∫–µ –æ—Ç–º–µ–Ω—ã
    if message.text == cancel_button:
        # —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        cansel(message)
        return
    # –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç —Ç–æ–≥–¥–∞
    if status not in statuses:
        # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(statuses))
        bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)
        return
    # –±–µ—Ä–µ–º id —Å—Ç–∞—Ç—É—Å–∞
    status_id = manager.get_status_id(status)
    #–¥–æ–±–æ–≤–ª—è–µ–º id –≤ data
    data.append(status_id)
    # –¥–æ–±–æ–≤–ª—è–µ—Å –≤ –±–∞–∑—É
    manager.insert_project([tuple(data)])
    # –≤–≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–¥–∞—á–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    bot.send_message(message.chat.id, "–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–æ–≤–ª–µ–Ω–∏—è —Å–∫–∏–ª–æ–≤
@bot.message_handler(commands=['skills'])
def skill_handler(message):
    # –±–µ—Ä–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # –±–µ—Ä–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    projects = manager.get_projects(user_id)
    # –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã
    if projects:
        # –±–µ—Ä–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
        projects = [x[2] for x in projects]
        # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∞–Ω–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ç–æ –ø–∏—à–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        no_projects(message)

# –¥–æ–±–æ–≤–ª—è–µ–º —Å–∫–∏–ª –∫ –ø—Ä–æ–µ–∫—Ç—É 
def skill_project(message, projects):
    # –±–µ—Ä–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    project_name = message.text
    # –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏–µ
    if message.text == cancel_button:
        # —Ç–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è
        cansel(message)
        return
    
    #–µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç
    if project_name not in projects:
        # –≤–≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    
    #–µ—Å–ª–∏ –µ—Å—Ç—å
    else:
        # –±–µ—Ä–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏
        skills = [x[1] for x in manager.get_skills()]
        # –≤—ã–≤–æ–¥–∏–º –Ω–∞–≤—ã–∫–∏
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ
def set_skill(message, project_name, skills):
    # –±–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    skill = message.text
    # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    # –ø—Ä–æ—Ñ–µ—Ä–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
    if message.text == cancel_button:
        cansel(message)
        return
    
    # –µ—Å–ª–∏ –Ω–µ—Ç —Å–∫–∏–ª–∞
    if skill not in skills:
        bot.send_message(message.chat.id, '–í–∏–¥–∏–º–æ, —Ç—ã –≤—ã–±—Ä–∞–ª –Ω–∞–≤—ã–∫. –Ω–µ –∏–∑ —Å–ø–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)
        return
    # –¥–æ–±–æ–≤–ª—è–µ–º —Å–∫–∏–ª –∫ –ø—Ä–æ–µ–∫—Ç—É
    manager.insert_skill(user_id, project_name, skill )
    bot.send_message(message.chat.id, f'–ù–∞–≤—ã–∫ {skill} –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç—É {project_name}')

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['projects'])
def get_projects(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        text = "\n".join([f"Project name:{x[2]} \nLink:{x[4]}\n" for x in projects])
        bot.send_message(message.chat.id, text, reply_markup=gen_inline_markup([x[2] for x in projects]))
    else:
        no_projects(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    project_name = call.data
    info_project(call.message, call.from_user.id, project_name)

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['delete'])
def delete_handler(message):
    # –±–µ—Ä–µ–º id —é–∑–µ—Ä–∞ –∏ –ø—Ä–æ–µ–∫—Ç—ã
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        text = "\n".join([f"Project name:{x[2]} \nLink:{x[4]}\n" for x in projects])
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, text, reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
    else:
        # –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
        no_projects(message)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
def delete_project(message, projects):
    project = message.text
    user_id = message.from_user.id

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
    if message.text == cancel_button:
        cansel(message)
        return
    # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    if project not in projects:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑!', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
        return
    # —É–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –∏ –ø–∏—à–µ–º –æ–± —ç—Ç–æ–º
    project_id = manager.get_project_id(project, user_id)
    manager.delete_project(user_id, project_id)
    bot.send_message(message.chat.id, f'‚úÖ –ü—Ä–æ–µ–∫—Ç {project} —É–¥–∞–ª–µ–Ω! ‚úÖ')


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['update_projects'])
def update_project(message):
    # –±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects )
    else:
        no_projects(message)

# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 2 —Å—Ç—É–ø–µ–Ω—å
def update_project_step_2(message, projects):
    # —Å–æ–æ–±—â–µ–Ω–∏–µ
    project_name = message.text
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
    if message.text == cancel_button:
        cansel(message)
        return
    # –µ—Å–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    if project_name not in projects:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!) –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑:", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects )
        return
    # –≤—ã–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ", reply_markup=gen_markup(attributes_of_projects.keys()))
    bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)

# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3 —Å—Ç—É–ø–µ–Ω—å
def update_project_step_3(message, project_name):
    # –±–µ—Ä–µ–º –∏–Ω—Ñ—É
    attribute = message.text
    reply_markup = None 
    # –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∏
    if message.text == cancel_button:
        cansel(message)
        return
    # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–ª–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
    if attribute not in attributes_of_projects.keys():
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—à–∏–±—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(attributes_of_projects.keys()))
        bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)
        return
    # –µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç —ç—Ç–æ —Å—Ç–∞—Ç—É—Å
    elif attribute == "–°—Ç–∞—Ç—É—Å":
        rows = manager.get_statuses()
        reply_markup=gen_markup([x[0] for x in rows])
    bot.send_message(message.chat.id, attributes_of_projects[attribute][0], reply_markup = reply_markup)
    bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attributes_of_projects[attribute][1])

# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 4 —Å—Ç—É–ø–µ–Ω—å
def update_project_step_4(message, project_name, attribute): 
    # –±–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    update_info = message.text
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å
    if attribute== "status_id":
        rows = manager.get_statuses()
        if update_info in [x[0] for x in rows]:
            update_info = manager.get_status_id(update_info)
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
        elif update_info == cancel_button:
            cansel(message)
        # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        else:
            bot.send_message(message.chat.id, "–ë—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup([x[0] for x in rows]))
            bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attribute)
            return
    # –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    user_id = message.from_user.id
    data = (update_info, project_name, user_id)
    manager.update_projects(attribute, data)
    bot.send_message(message.chat.id, "‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã!) ‚úÖ")

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    projects =[ x[2] for x in manager.get_projects(user_id)]
    project = message.text
    if project in projects:
        info_project(message, user_id, project)
        return
    bot.reply_to(message, "–¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
    info(message)

# –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()